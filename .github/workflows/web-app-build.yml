name: Build WebApp

on:
  push:
    branches:
      - main
    paths:
      - 'apps/webapp/**'
      - 'Dockerfile.webapp'
      - '.github/workflows/web-app-build.yml'
  schedule:
    # - cron: '30 21 * * *' # 07:30 AEST (9:30pm UTC)
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  packages: write

defaults:
  run:
    shell: bash

env:
  ARTIFACT_NAME: webapp
  ARTIFACT_PATH: dist/webapp

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      webapp: ${{ steps.filter.outputs.webapp }}
      bff: ${{ steps.filter.outputs.bff }}

    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            webapp:
              - 'apps/webapp/**'
              - '!apps/webapp/api/**'
              - 'Dockerfile.webapp'
              - '.github/workflows/web-app-build.yml'
            bff:
              - 'apps/webapp/api/**'

  build-webapp:
    needs:
      - detect-changes
    if: needs.detect-changes.outputs.webapp == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm -r install
        env:
          HUSKY: '0'

      - name: Build
        run: pnpm --filter=webapp build

      - name: Assemble WebApp files for packaging
        run: |
          mkdir -p ${{ env.ARTIFACT_PATH }}
          cp -r apps/webapp/dist/static ${{ env.ARTIFACT_PATH }}/static
          cp apps/webapp/dist/html/main/index.html ${{ env.ARTIFACT_PATH }}/index.html

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error
          retention-days: 7

  build-bff:
    needs:
      - detect-changes
    if: needs.detect-changes.outputs.bff == 'true'
    runs-on: ubuntu-latest
    environment: artifacts
    env:
      # target-platforms: linux/amd64,linux/arm64
      target-platforms: linux/arm64
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Container
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.webapp
          push: true
          build-args: |
            run_args: "--api-only"
          target: final
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.target-platforms }}
          tags: |
            ${{ env.ECR_REGISTRY }}/imagimaps/service/webapp-bff:latest

  deploy-webapp:
    needs:
      - build-webapp
    # uses: ./.github/workflows/web-app-deploy.yml
    # with:
    #   action: deploy
    #   module_dir: apps/webapp
    # secrets: inherit
    runs-on: ubuntu-latest
    environment: development
    env:
      website_bucket: dev.imagimaps.com
      environment: development

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: Login to AWS
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy WebApp to S3
        run: |
          echo "Deploying WebApp to S3"
          echo "Artifact Path: ${{ env.ARTIFACT_PATH }}"
          echo "Bucket Name: ${{ env.website_bucket }}"
          aws s3 cp ./${{ env.ARTIFACT_PATH }} s3://${{ env.website_bucket }} --recursive

      - name: Get CloudFront Distribution ID
        id: cf-distribution
        run: |
          TAG_KEY1="Environment"
          TAG_VALUE1="${{ env.environment }}"
          TAG_KEY2="Project"
          TAG_VALUE2="imagimaps"
          distribution_arns=$(aws cloudfront list-distributions --query "DistributionList.Items[*].ARN" --output text)
          for arn in $distribution_arns; do
            tags=$(aws cloudfront list-tags-for-resource --resource $arn --query "Tags.Items" --output json)
            if echo $tags | jq -e ".[] | select(.Key == \"$TAG_KEY1\" and .Value == \"$TAG_VALUE1\")" > /dev/null && \
                echo $tags | jq -e ".[] | select(.Key == \"$TAG_KEY2\" and .Value == \"$TAG_VALUE2\")" > /dev/null; then
              distribution_id=$(aws cloudfront list-distributions --query "DistributionList.Items[?ARN=='$arn'].Id" --output text)
              echo "distribution_id=$distribution_id" >> $GITHUB_OUTPUT
              break
            fi
          done

      - name: Invalidate CloudFront cache
        run: |
          echo "Invalidating CloudFront cache for distribution $DISTRIBUTION_ID"
          echo 'aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"'
        env:
          DISTRIBUTION_ID: ${{ steps.cf-distribution.outputs.distribution_id }}

  deploy-bff:
    needs:
      - build-bff
    runs-on: ubuntu-latest
    environment: development
    env:
      SERVICE_NAME: webapp-bff

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to development
        uses: Imagimaps/common-actions/.github/actions/deploy-service@main
        with:
          environment: development
          environment_short_name: dev
          service_name: ${{ env.SERVICE_NAME }}
          aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          aws_role_arn: ${{ secrets.AWS_ROLE_ARN }}
          artifacts_aws_account_id: ${{ secrets.ARTIFACTS_AWS_ACCOUNT_ID }}
          aws_region: ${{ vars.AWS_REGION }}
